'''
Задача 1:
Создайте словарь, связав его с переменной wallets_dict 
и наполните данными, которые бы отражали эфиров на разных кошельках. 
Внесите изменения в словарь согласно следующему: 
а) на одном кошельке изменилось количество эфиров
б) добавили новый кошелек
с) удалите 1 кошелек 
д) сколько всего кошельков в словаре

Задача 2:
Посчитать сколько раз в строке встречается каждый символ

Задача 3:
Напишите функцию update_dictionary(d, key, value), 
которая принимает на вход словарь d и два числа: key и value. 
Если ключ key есть в словаре d, то добавьте значение value в список, 
который хранится по этому ключу. 
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2*key. 
Если и ключа 2*key нет, то нужно добавить ключ 2*key в словарь
и сопоставить ему список из переданного элемента [value].

Задача 4:
Когда Антон прочитал «Войну и мир», ему стало интересно, 
сколько слов и в каком количестве используется в этой книге.
Помогите Антону написать упрощённую версию такой программы, 
которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.
Программа должна считывать одну строку со стандартного ввода и 
выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) 
в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово​ должно выводиться только один раз
'''

# Задача 1:
# Создайте словарь, связав его с переменной wallets_dict 
# и наполните данными, которые бы отражали количество эфиров на разных кошельках. 
# Внесите изменения в словарь согласно следующему: 
# а) на одном кошельке изменилось количество эфиров
# б) добавили новый кошелек
# с) удалите 1 кошелек 
# д) сколько всего кошельков в словаре


# d1 = {
#     'a': 1,
#     'b': 2,
#     'c': 3,
# }

# for key in d1:
#     print(key, d1[key])

# for key in d1.keys():
#     print(key, d1[key])

# for val in d1.values():
#     print(val)

# for key, val in d1.items():
#     print(key, val)

def task_nine_insert_after_max(lst: list, k) -> list:
    high_ind = 0
    for ind, num in enumerate(lst):
        if lst[high_ind] < num:
            high_ind = ind
    lst.insert(high_ind + 1, k)
    return lst

print(task_nine_insert_after_max([11, 9, 3, 10], 8))
