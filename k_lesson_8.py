def foo(name='noname'):
    print('hello', name)


def add(a, b):
    return a + b

# foo('bob')
# foo('john')
# foo()

# print(add(1, 2))
# a = add(1, 20)
# print(a)


# def foo3(lines, file):
#     if lines == 0:
#         return []
#     with open(file) as f:
#         return f.readlines()[-lines:]


# # чтение:
# path = 'text.txt'

# with open(path) as f:
#     for line in f:
#         print(line)

# # запись
# with open(path, 'w') as f:
#     f.write('text')

# with open(path, 'a') as f:
#     f.write('text')


# словари
# bob_smith = [4, 5, 4, 5]
# john = [4, 5, 4, 5]
# alice = [4, 2, 4, 5]
# mikle = [4, 5, 4, 5]
# students_marks = [bob_smith, john, alice, mikle]
# students_names = ['bob_smith', 'john', 'alice', 'mikle']
# print(students_names[2], students_marks[2])

'''
словарь - структура данных, которая состоит из пар значений (ключ: значение)
ключом могут быть элементарные типы данных
значением может быть всё, что угодно

синтаксис:
dictionary_name = {key1: val1, key2: val2, key3: val3}
# более удобный способ записи:
dictionary_name = {
    key1: val1, 
    key2: val2, 
    key3: val3
}

В СЛОВАРЕ НЕТ ИНДЕКСОВ!!
'''

d1 = {
    'cat': 'кот',
    'fence': 'забор',
    'dog': 'собака',
    0: 'zero',
    1: [1, 2, 3],
}

# обращение к словарю
# print(d1['cat'])
# print(d1['fence'])
# print(d1[0])
# print(d1[True])

# bob_smith = [4, 5, 4, 5]
# john = [4, 5, 4, 5]
# alice = [4, 2, 4, 5]
# mikle = [4, 5, 4, 5]
# students_marks = [bob_smith, john, alice, mikle]
# students_names = ['bob_smith', 'john', 'alice', 'mikle']
marks_dict = {
    'bob_smith': [4, 5, 4, 5],
    'john': [2, 2, 2],
    'alice': [3, 3, 4],
    'mikle': [4, 4, 2, 5]
}

print(marks_dict)
# marks_dict['john'] = [5]
marks_dict['john'].append(9)
marks_dict['john'][0] = 10
print(marks_dict)

d2 = {
    'a': 1,
    'b': 2,
    'c': 3,
}


# изменение значение
d2['a'] += 10
# перезаписываем значение
d2['a'] = 100
print(d2)
# изменение значение
# d2['d'] += 10 # ошибка, так как ключа d нет
# если ключа нет, он создается автоматически
d2['d'] = 100
print(d2)

# CRUD - create, read!, update, delete!

# проверка наличия ключа
if 'e' in d2:
    d2['e'] += 1
else:
    d2['e'] = 0
print(d2)

d2 = {}
print(d2)

print('-------------------------------------------------')
# перебор словаря
d1 = {
    'cat': 'кот',
    'fence': 'забор',
    'dog': 'собака',
    0: 'zero',
    1: [1, 2, 3],
}

# 1 способ (перебор по ключам)
for key in d1:
    print(key, d1[key])

# 2 способ (перебор по значениям)
# for val in d1.values():
#     print(val)

# 3 способ (перебор по ключам)
# for key in d1.keys():
#     print(key, d1[key])

# 4 способ (перебор по ключам и значениям)
# for key, val in d1.items():
#     print(key, val)


'''
задача 1:
Создайте словарь, связав его с переменной school, и наполните данными, 
которые бы отражали количество учащихся в разных классах (1а, 1б, 2б, 6а, 7в и т. п.). 
Внесите изменения в словарь согласно следующему: 
a) в одном из классов изменилось количество учащихся, 
b) в школе появился новый класс, 
c) в школе был расформирован (удален) другой класс. 
Вычислите общее количество учащихся в школе.

school = {
    '1а': 20,
    '1б': 23,
    '2б': 10,
    '6а': 22,
    '7в': 26,
}
print(school)
school['2б'] -= 5
print(school)
school['8д'] = 5
print(school)
del school['6а']
print(school)
# res = 0
# for key in school:
#     res += school[key]
# for val in school.values():
#     res += val
print(sum(school.values()))
# print(res)


задача 2: 
Есть 2 словаря. Объединить их без помощи функции update

d1 = {
    'a': 1,
    'b': 2,
    'c': 3,
}
d2 = {
    'd': 4,
    'e': 5,
}
for key in d2:
    d1[key] = d2[key]
print(d1)

задача 3:
Есть словарь с числовыми значениями. Посчитать среднюю по значениям

# d1 = {
#     '1а': 20,
#     '1б': 23,
#     '2б': 10,
#     '6а': 22,
#     '7в': 26,
# }
# print(sum(d1.values()) / len(d1))

задача 4: 
Даны два списка одинаковой длины. Необходимо создать из них словарь таким образом, чтобы элементы первого списка были ключами, а элементы второго — соответственно значениями нашего словаря.

задача 5: 
Напишите функцию update_dictionary(d, key, value), 
которая принимает на вход словарь d и два числа: key и value. 
Если ключ key есть в словаре d, то добавьте значение value в список, 
который хранится по этому ключу. 
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2*key. 
Если и ключа 2*key нет, то нужно добавить ключ 2*key в словарь
и сопоставить ему список из переданного элемента [value].

задача 6: Когда Антон прочитал «Войну и мир», ему стало интересно, 
сколько слов и в каком количестве используется в этой книге.
Помогите Антону написать упрощённую версию такой программы, 
которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.
Программа должна считывать одну строку со стандартного ввода и 
выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) 
в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово​ должно выводиться только один раз
'''

# задача 1:
# Создайте словарь, связав его с переменной school, и наполните данными, 
# которые бы отражали количество учащихся в разных классах (1а, 1б, 2б, 6а, 7в и т. п.). 
# Внесите изменения в словарь согласно следующему: 
# a) в одном из классов изменилось количество учащихся, 
# b) в школе появился новый класс, 
# c) в школе был расформирован (удален) другой класс. 
# Вычислите общее количество учащихся в школе.

# задача 2: 
# Есть 2 словаря. Объединить их без помощи функции update

# задача 3:
# Есть словарь с числовыми значениями. Посчитать среднюю по значениям

# задача 4: 
# Даны два списка одинаковой длины. Необходимо создать из них словарь таким образом, 
# чтобы элементы первого списка были ключами, а элементы второго — соответственно значениями нашего словаря.

l1 = [1, 2, 3, 4]
l2 = ['one', 'two', 'three', 'four']
l3 = ['a', 'b', 'c', 'd']
d = {}
# for i in range(len(l1)):
#     d[l1[i]] = l2[i]
for key, val, letter in zip(l1, l2, l3):
    print(letter)
    d[key] = val
print(d)

# задача 5: 
# Напишите функцию update_dictionary(d, key: int, value: int), 
# которая принимает на вход словарь d и два числа: key и value. 
# Если ключ key есть в словаре d, то добавьте значение value в список, 
# который хранится по этому ключу. 
# Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2*key. 
# Если и ключа 2*key нет, то нужно добавить ключ 2*key в словарь
# и сопоставить ему список из переданного элемента [value].

from typing import Dict, List

def update_dictionary(d: Dict[int, List], key: int, value: int):
    if key in d:
        d[key].append(value)
    else:
        if 2*key in d:
            d[2*key].append(value)
        else:
            d[2*key] = [value]
